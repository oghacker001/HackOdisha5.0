import Donation from "../models/donation.js";
import Campaign from "../models/Campaign.js";
import User from "../models/userModels.js";
import mongoose from "mongoose";

// âœ… 1. Create Donation
export const createDonation = async (req, res, next) => {
Â  try {
Â  Â  const { campaignId, amount, message, paymentMethod } = req.body;
Â  Â  const userId = req.user.id;

Â  Â  // Check campaign
Â  Â  const campaign = await Campaign.findById(campaignId);
Â  Â  if (!campaign) return res.status(404).json({ message: "Campaign not found" });

Â  Â  // Create donation
Â  Â  const donation = await Donation.create({
Â  Â  Â  donor: userId,
Â  Â  Â  campaign: campaignId,
Â  Â  Â  amount,
Â  Â  Â  message,
Â  Â  Â  paymentMethod,
Â  Â  Â  status: "Completed" // ðŸ‘ˆ you can integrate payment gateway later
Â  Â  });

Â  Â  // Update campaign collectedAmount
Â  Â  campaign.collectedAmount = (campaign.collectedAmount || 0) + amount;
Â  Â  await campaign.save();

Â  Â  res.status(201).json({ success: true, donation });
Â  } catch (err) {
Â  Â  next(err);
Â  }
};

// âœ… 2. Get All Donations by User (with campaign details)
export const getUserDonations = async (req, res, next) => {
Â  try {
Â  Â  const userId = req.user.id;

Â  Â  const donations = await Donation.find({ donor: userId })
Â  Â  Â  .populate("campaign", "title description funding_goal collected_amount category status images")
Â  Â  Â  .sort({ createdAt: -1 });

Â  Â  res.success(donations, "User donations retrieved successfully");
Â  } catch (err) {
Â  Â  next(err);
Â  }
};

// âœ… 3. Get Donation Stats (total count + sum)
export const getDonationStats = async (req, res, next) => {
Â  try {
Â  Â  const userId = req.user.id;

Â  Â  const stats = await Donation.aggregate([
Â  Â  Â  { $match: { donor: new mongoose.Types.ObjectId(userId), status: "Completed" } },
Â  Â  Â  {
Â  Â  Â  Â  $group: {
Â  Â  Â  Â  Â  _id: null,
Â  Â  Â  Â  Â  totalAmount: { $sum: "$amount" },
Â  Â  Â  Â  Â  totalDonations: { $sum: 1 }
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  ]);

Â  Â  res.success({
Â  Â  Â  totalAmount: stats[0]?.totalAmount || 0,
Â  Â  Â  totalDonations: stats[0]?.totalDonations || 0
Â  Â  }, "Donation stats retrieved successfully");
Â  } catch (err) {
Â  Â  next(err);
Â  }
};

// âœ… 4. Cancel/Delete Donation
export const deleteDonation = async (req, res, next) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const userId = req.user.id;

Â  Â  const donation = await Donation.findOne({ _id: id, donor: userId });
Â  Â  if (!donation) return res.status(404).json({ message: "Donation not found" });

Â  Â  // Rollback if donation was completed
Â  Â  if (donation.status === "Completed") {
Â  Â  Â  const campaign = await Campaign.findById(donation.campaign);
Â  Â  Â  if (campaign) {
Â  Â  Â  Â  campaign.collectedAmount -= donation.amount;
Â  Â  Â  Â  if (campaign.collectedAmount < 0) campaign.collectedAmount = 0;
Â  Â  Â  Â  await campaign.save();
Â  Â  Â  }
Â  Â  }

Â  Â  await donation.deleteOne();
Â  Â  res.success(null, "Donation deleted successfully");
Â  } catch (err) {
Â  Â  next(err);
Â  }
};
